######
# wav2png Makefile
#
# Run ./configure to generate config.mk with custom settings
# or use default settings below

# Include config.mk if it exists (generated by configure script)
-include config.mk

# Default values (used if configure wasn't run)
PREFIX ?= /usr/local
BINDIR ?= $(PREFIX)/bin

BINARY = bin/wav2png
SRC = src

# Default compiler settings
CXX ?= g++
CXXFLAGS ?= -std=c++17 -O3 -Wall -Werror
LDFLAGS ?=

# Default includes
PNGPP_INCLUDES ?= -Idependencies/include
INCLUDES = $(PNGPP_INCLUDES)

# Default library flags
LIBPNG_LIBS ?= $(shell libpng-config --ldflags 2>/dev/null || echo "-lpng")
SNDFILE_LIBS ?= -lsndfile
BOOST_LIBS ?= -lboost_program_options

LD_PLATFORM_FLAGS = $(BOOST_LIBS) $(LIBPNG_LIBS) $(SNDFILE_LIBS) $(LDFLAGS)

.PHONY: all clean install uninstall examples icons profile install_dependencies

all: $(BINARY)

$(SRC)/version.hpp: Makefile version.txt
	@echo "Generating version.hpp..."
	@echo "#ifndef VERSION_HPP__" > $(SRC)/version.hpp
	@echo "#define VERSION_HPP__" >> $(SRC)/version.hpp
	@echo "namespace {" >> $(SRC)/version.hpp
	@echo "	namespace version {" >> $(SRC)/version.hpp
	@echo "		static const std::string date=\"`date`\";" >> $(SRC)/version.hpp
	@echo "		static const std::string platform=\"Linux\";" >> $(SRC)/version.hpp
	@echo "		static const std::string version=\"`cat version.txt`\";" >> $(SRC)/version.hpp
	@echo "	}; /* namespace version */" >> $(SRC)/version.hpp
	@echo "} /* anonymous namespace */" >> $(SRC)/version.hpp
	@echo "#endif /* VERSION_HPP__ */" >> $(SRC)/version.hpp

$(BINARY): $(SRC)/*.cpp $(SRC)/*.hpp $(SRC)/version.hpp
	@echo "Building wav2png..."
	@mkdir -p `dirname $(BINARY)`
	$(CXX) $(CXXFLAGS) $(SRC)/main.cpp $(SRC)/wav2png.cpp $(SRC)/audio_converter.cpp $(INCLUDES) $(LD_PLATFORM_FLAGS) -o $(BINARY)
	@echo "Build complete: $(BINARY)"

clean:
	@echo "Cleaning build artifacts..."
	@rm -f $(BINARY)
	@rm -f $(BINARY)_profile
	@rm -f gmon.out
	@rm -f $(SRC)/version.hpp
	@rm -f config.mk
	@echo "Clean complete"

install: $(BINARY)
	@echo "Installing wav2png to $(BINDIR)..."
	@install -d $(BINDIR)
	@install -m 755 $(BINARY) $(BINDIR)/wav2png
	@echo "Installation complete"

uninstall:
	@echo "Uninstalling wav2png from $(BINDIR)..."
	@rm -f $(BINDIR)/wav2png
	@echo "Uninstall complete"

profile:
	@echo "Building profiling version..."
	$(CXX) $(CXXFLAGS) $(SRC)/*.cpp $(INCLUDES) $(LD_PLATFORM_FLAGS) -o $(BINARY)_profile -g -pg
	$(BINARY)_profile baked.wav
	gprof $(BINARY)_profile | less

ESCAPED_BINARY = $(shell echo $(BINARY) | sed 's/\//\\\//g' )

examples/example0.png: $(BINARY) README.md
	@echo "Generating examples..."
	@cat README.md | grep wav2png | grep examples/ | grep -v github | while read line; do eval `echo $$line | sed "s/wav2png/$(ESCAPED_BINARY)/g"`; done

examples: examples/example0.png

icon.wav: Makefile
	@echo "Generating test audio..."
	@sox -n icon.wav synth 0.5 sine 10.1

ICON_COLORS = --foreground-color=ffb400ff --background-color=2e4562ff

icons/icon_512.png: icon.wav $(BINARY)
	@echo "Generating icon files..."
	@$(BINARY) $(ICON_COLORS) -w2048 -h2048 -o icons/icon_2048.png icon.wav
	@$(BINARY) $(ICON_COLORS) -w1024 -h1024 -o icons/icon_1024.png icon.wav
	@$(BINARY) $(ICON_COLORS) -w512 -h512 -o icons/icon_512.png icon.wav
	@$(BINARY) $(ICON_COLORS) -w256 -h256 -o icons/icon_256.png icon.wav
	@$(BINARY) $(ICON_COLORS) -w128 -h128 -o icons/icon_128.png icon.wav
	@$(BINARY) $(ICON_COLORS) -w64  -h64  -o icons/icon_64.png icon.wav
	@$(BINARY) $(ICON_COLORS) -w32  -h32  -o icons/icon_32.png icon.wav
	@$(BINARY) $(ICON_COLORS) -w16  -h16  -o icons/icon_16.png icon.wav

icons: icons/icon_512.png

install_dependencies:
	@echo "Installing dependencies..."
	@sudo apt-get update -qq
	@sudo apt-get install -y libsndfile1-dev libpng++-dev libpng-dev libboost-program-options-dev
	@echo "Dependencies installed"
	@echo ""
	@echo "Optional: Install ffmpeg for extended format support (MP3, M4A, etc.):"
	@echo "  sudo apt-get install -y ffmpeg"

help:
	@echo "wav2png Makefile targets:"
	@echo ""
	@echo "  all                 Build wav2png (default)"
	@echo "  clean               Remove build artifacts"
	@echo "  install             Install to $(BINDIR)"
	@echo "  uninstall           Remove from $(BINDIR)"
	@echo "  examples            Generate example images"
	@echo "  icons               Generate icon files"
	@echo "  profile             Build and run profiling version"
	@echo "  install_dependencies Install required packages (Ubuntu/Debian)"
	@echo "  help                Show this help message"
	@echo ""
	@echo "Configuration:"
	@echo "  Run ./configure to customize build settings"
	@echo "  Or set variables manually: make CXX=clang++ PREFIX=/opt/wav2png"
	@echo ""
